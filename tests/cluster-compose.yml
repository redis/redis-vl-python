services:
  redis-node-1:
    image: "redis:8.0"
    command:
      - redis-server
      - --port 7001
      - --cluster-enabled yes
      - --cluster-config-file nodes.conf
      - --cluster-node-timeout 5000
      - --appendonly yes
      - --cluster-announce-ip host.docker.internal
      - --cluster-announce-port 7001
      - --cluster-announce-bus-port 17001
      - --protected-mode no
    ports:
      - "7001:7001"
      - "17001:17001"
    volumes:
      - ./data/7001:/data

  redis-node-2:
    image: "redis:8.0"
    command:
      - redis-server
      - --port 7002
      - --cluster-enabled yes
      - --cluster-config-file nodes.conf
      - --cluster-node-timeout 5000
      - --appendonly yes
      - --cluster-announce-ip host.docker.internal
      - --cluster-announce-port 7002
      - --cluster-announce-bus-port 17002
      - --protected-mode no
    ports:
      - "7002:7002"
      - "17002:17002"
    volumes:
      - ./data/7002:/data

  redis-node-3:
    image: "redis:8.0"
    command:
      - redis-server
      - --port 7003
      - --cluster-enabled yes
      - --cluster-config-file nodes.conf
      - --cluster-node-timeout 5000
      - --appendonly yes
      - --cluster-announce-ip host.docker.internal
      - --cluster-announce-port 7003
      - --cluster-announce-bus-port 17003
      - --protected-mode no
    ports:
      - "7003:7003"
      - "17003:17003"
    volumes:
      - ./data/7003:/data

  redis-node-4:
    image: "redis:8.0"
    command:
      - redis-server
      - --port 7004
      - --cluster-enabled yes
      - --cluster-config-file nodes.conf
      - --cluster-node-timeout 5000
      - --appendonly yes
      - --cluster-announce-ip host.docker.internal
      - --cluster-announce-port 7004
      - --cluster-announce-bus-port 17004
      - --protected-mode no
    ports:
      - "7004:7004"
      - "17004:17004"
    volumes:
      - ./data/7004:/data

  redis-node-5:
    image: "redis:8.0"
    command:
      - redis-server
      - --port 7005
      - --cluster-enabled yes
      - --cluster-config-file nodes.conf
      - --cluster-node-timeout 5000
      - --appendonly yes
      - --cluster-announce-ip host.docker.internal
      - --cluster-announce-port 7005
      - --cluster-announce-bus-port 17005
      - --protected-mode no
    ports:
      - "7005:7005"
      - "17005:17005"
    volumes:
      - ./data/7005:/data

  redis-node-6:
    image: "redis:8.0"
    command:
      - redis-server
      - --port 7006
      - --cluster-enabled yes
      - --cluster-config-file nodes.conf
      - --cluster-node-timeout 5000
      - --appendonly yes
      - --cluster-announce-ip host.docker.internal
      - --cluster-announce-port 7006
      - --cluster-announce-bus-port 17006
      - --protected-mode no
    ports:
      - "7006:7006"
      - "17006:17006"
    volumes:
      - ./data/7006:/data

  redis-cluster-setup:
    image: "redis:8.0"
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    entrypoint:
      - sh
      - -c
      - |
        echo "Waiting for Redis nodes to be available..."
        sleep 15

        NODES="redis-node-1:7001 redis-node-2:7002 redis-node-3:7003 redis-node-4:7004 redis-node-5:7005 redis-node-6:7006"

        echo "Force resetting all nodes before cluster creation..."
        for NODE_ADDR_PORT in $$NODES; do
          NODE_HOST=$$(echo $$NODE_ADDR_PORT | cut -d':' -f1)
          NODE_PORT=$$(echo $$NODE_ADDR_PORT | cut -d':' -f2)
          echo "Resetting node $$NODE_HOST:$$NODE_PORT"
          
          # Wait for node to be responsive
          retry_count=0
          max_retries=10
          until redis-cli -h $$NODE_HOST -p $$NODE_PORT ping 2>/dev/null | grep -q PONG; do
            retry_count=$$((retry_count+1))
            if [ "$$retry_count" -gt "$$max_retries" ]; then
              echo "Error: Node $$NODE_HOST:$$NODE_PORT did not respond after $$max_retries retries."
              exit 1 # Exit if a node is unresponsive
            fi
            echo "Waiting for $$NODE_HOST:$$NODE_PORT to respond (attempt $$retry_count/$$max_retries)..."
            sleep 3 # Increased sleep between pings
          done
          
          echo "Flushing and hard resetting $$NODE_HOST:$$NODE_PORT"
          redis-cli -h $$NODE_HOST -p $$NODE_PORT FLUSHALL || echo "Warning: FLUSHALL failed on $$NODE_HOST:$$NODE_PORT, attempting to continue..."
          # Use CLUSTER RESET HARD
          redis-cli -h $$NODE_HOST -p $$NODE_PORT CLUSTER RESET HARD || echo "Warning: CLUSTER RESET HARD failed on $$NODE_HOST:$$NODE_PORT, attempting to continue..."
        done
        echo "Node reset complete."
        sleep 5 # Give a moment for resets to settle

        MAX_ATTEMPTS=5
        ATTEMPT=1
        CLUSTER_CREATED=false

        while [ $$ATTEMPT -le $$MAX_ATTEMPTS ]; do
          echo "Attempting to create Redis cluster (Attempt $$ATTEMPT/$$MAX_ATTEMPTS)..."
          output=$$(echo yes | redis-cli --cluster create \
            $$NODES \
            --cluster-replicas 1 2>&1)

          if echo "$$output" | grep -q "\[OK\] All 16384 slots covered."; then
            echo "Cluster created successfully."
            CLUSTER_CREATED=true
            break
          else
            echo "Failed to create cluster on attempt $$ATTEMPT."
            echo "Output from redis-cli: $$output"
            if [ $$ATTEMPT -lt $$MAX_ATTEMPTS ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          fi
          ATTEMPT=$$((ATTEMPT + 1))
        done

        if [ "$$CLUSTER_CREATED" = "false" ]; then
          echo "Failed to create cluster after $$MAX_ATTEMPTS attempts. Exiting."
          exit 1
        fi

        echo "Redis cluster setup complete. Container will remain active for health checks."
        tail -f /dev/null
    healthcheck:
      test: >
        sh -c "redis-cli -h redis-node-1 -p 7001 cluster info | grep -q 'cluster_state:ok'"
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 10s
