name: Test Suite

on:
  pull_request:

  push:
    branches:
      - main

  schedule:
    - cron: "0 2 * * *" # 2 AM UTC nightly

  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.7.13"

jobs:
  service-tests:
    name: Service Tests
    runs-on: ubuntu-latest
    env:
      HF_HOME: ${{ github.workspace }}/hf_cache
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Cache HuggingFace Models
        uses: actions/cache@v4
        with:
          path: hf_cache
          key: ${{ runner.os }}-hf-cache

      - name: Set HuggingFace token
        run: |
          mkdir -p ~/.huggingface
          echo '{"token":"${{ secrets.HF_TOKEN }}"}' > ~/.huggingface/token

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          python-version: ${{ env.PYTHON_VERSION }}   # sets UV_PYTHON
          cache-dependency-glob: |
            pyproject.toml
            uv.lock

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Run full test suite and prime the HF cache
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GCP_LOCATION: ${{ secrets.GCP_LOCATION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
          VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
          OPENAI_API_VERSION: ${{ secrets.OPENAI_API_VERSION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          make test-all

  test:
    name: Python ${{ matrix.python-version }} - redis-py ${{ matrix.redis-py-version }} [redis ${{ matrix.redis-version }}]
    runs-on: ubuntu-latest
    needs: service-tests
    env:
      HF_HOME: ${{ github.workspace }}/hf_cache
    strategy:
      fail-fast: false
      matrix:
        # 3.11 tests are run in the service-tests job
        python-version: ["3.9", "3.10", "3.12", "3.13"] 
        redis-py-version: ["5.x", "6.x"]
        redis-version: ["6.2.6-v9", "latest", "8.0.2"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Cache HuggingFace Models
        uses: actions/cache@v4
        with:
          path: hf_cache
          key: ${{ runner.os }}-hf-cache

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          python-version: ${{ matrix.python-version }}   # sets UV_PYTHON
          cache-dependency-glob: |
            pyproject.toml
            uv.lock

      - name: Install dependencies
        run: |
          uv sync --all-extras

          # Install right redis version based on redis py
          if [[ "${{ matrix.redis-py-version }}" == "5.x" ]]; then
            uv pip install "redis>=5,<6"
          else
            uv pip install "redis>=6,<7"
          fi

      - name: Set Redis image name
        run: |
          if [[ "${{ matrix.redis-version }}" == "8.0.2" ]]; then
            echo "REDIS_IMAGE=redis:${{ matrix.redis-version }}" >> $GITHUB_ENV
          else
            echo "REDIS_IMAGE=redis/redis-stack-server:${{ matrix.redis-version }}" >> $GITHUB_ENV
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Run tests
        env:
          GCP_LOCATION: ${{ secrets.GCP_LOCATION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          make test

      - name: Run notebooks
        if: matrix.redis-py-version == '6.x' && matrix.redis-version == 'latest'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GCP_LOCATION: ${{ secrets.GCP_LOCATION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
          VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
          OPENAI_API_VERSION: ${{ secrets.OPENAI_API_VERSION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          docker run -d --name redis -p 6379:6379 redis/redis-stack-server:latest
          make test-notebooks

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          python-version: ${{ env.PYTHON_VERSION }}   # sets UV_PYTHON
          cache-dependency-glob: |
            pyproject.toml
            uv.lock
  
      - name: Install dependencies
        run: |
          uv sync --group docs --frozen

      - name: Build docs
        run: |
          make docs-build
